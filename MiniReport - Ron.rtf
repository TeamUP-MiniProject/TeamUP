{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs32 \cf0 Architecture :\
\
Backend - written mostly in Node.js JavaScript, some usages of Query based languages such as SQL/noSQL, MongoDB.\
We have followed the MVC scheme:\

\f1\b M
\f0\b0 odel - The data modules which contains Events & Users.\
\

\f1\b V
\f0\b0 iew - Includes all the template engine and css files\
\'97> Template engine - Used EJS, a backend template engine - not the common way to render data using FrontEnd tho for MVP and this course purpose it did great.\
\

\f1\b C
\f0\b0 ontrollers - The requests handlers\
\
Used npm (Node.js package manager) in-order to manage the project dependencies rather development or deployment dependency.\
\
What functionallities we have accomplished : \
1) User login\
2) Creating Event\
3) DataBase connection and data management using MongoDB\
4) Event Feed\
5) all other managing functionalities such as : deleting event, registrar to a 	specific event, user sign-up etc.\
\
Features TODO:\
1) google maps in-order to integrate with location based events 	using GoogleMaps \
2) Implementing location based algorithm inorder\
3) Admin controllers such as:\
	- adding new hobbies for different categories\
	- manipulation of users based on inappropriate behaviour\
	- contact us submission file in-order to interact with users requests 	(adding new hobby to the list etc) /reports (malicious or not).\
4) Finish Authentication - Implementation of going a not yes functional.\
\
	}